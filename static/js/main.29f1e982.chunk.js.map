{"version":3,"sources":["App.js","index.js"],"names":["foodDictionary","foodsWeKnow","Object","keys","App","useState","meaning","setMeaning","className","style","paddingTop","placeholder","onChange","event","target","value","undefined","map","foodEmoji","onClick","foodEmojiClickHandler","rootElement","document","getElementById","createRoot","render"],"mappings":"mKAIMA,EAAiB,CACrB,eAAM,QACN,eAAM,aACN,eAAM,UACN,eAAM,WACN,eAAM,YACN,eAAM,YACN,eAAM,cACN,eAAM,gBACN,eAAM,WACN,eAAM,eACN,eAAM,cACN,eAAM,gBACN,eAAM,YACN,eAAM,aACN,eAAM,WAEJC,EAAcC,OAAOC,KAAKH,GAEf,SAASI,IACtB,MAA8BC,mBAAS,kCAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAeA,OACE,sBAAKC,UAAU,MAAf,UACE,8BACE,6BAvCU,uBAyCZ,8BACE,oBAAIC,MAAO,CAAEC,WAAY,QAAzB,oEAIF,uBAAOC,YAAY,gCAAsBC,SAvB7C,SAA0BC,GACxB,IAAIP,EAAUN,EAAea,EAAMC,OAAOC,YAC1BC,IAAZV,IACFA,EAAU,0CAEZC,EAAWD,EACZ,IAkBG,oBAAIE,UAAU,SAAd,SAAwBF,IACxB,qFACCL,EAAYgB,KAAI,SAAUC,GACzB,OACE,sBAEEC,QAAS,kBAtBnB,SAA+BD,GAE7BX,EADcP,EAAekB,GAE9B,CAmBwBE,CAAsBF,EAA5B,EAFX,SAIGA,GAHIA,EAMV,MAGN,CC3DD,IAAMG,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACrB,EAAD,M","file":"static/js/main.29f1e982.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState } from \"react\";\n\nvar headingText = \"Food interpreter\";\nconst foodDictionary = {\n  \"üçï\": \"pizza\",\n  \"üçî\": \"beefburger\",\n  \"üçø\": \"popcorn\",\n  \"ü•™\": \"sandwich\",\n  \"üçù\": \"sapghetti\",\n  \"üç®\": \"ice cream\",\n  \"üç§\": \"fried prawn\",\n  \"üç´\": \"chocolate bar\",\n  \"ü•û\": \"pancakes\",\n  \"üçü\": \"french fries\",\n  \"ü•ó\": \"green salad\",\n  \"üéÇ\": \"birthday cake\",\n  \"ü•ê\": \"croissant\",\n  \"üçõ\": \"curry rice\",\n  \"üç™\": \"biscuit\"\n};\nvar foodsWeKnow = Object.keys(foodDictionary);\n\nexport default function App() {\n  const [meaning, setMeaning] = useState(\"Translation will appear here..\");\n\n  function foodInputHandler(event) {\n    var meaning = foodDictionary[event.target.value];\n    if (meaning === undefined) {\n      meaning = \"Sorry! failure to recognise this emoji\";\n    }\n    setMeaning(meaning);\n  }\n\n  function foodEmojiClickHandler(foodEmoji) {\n    var meaning = foodDictionary[foodEmoji];\n    setMeaning(meaning);\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>{headingText}</h1>\n      </nav>\n      <div>\n        <h2 style={{ paddingTop: \"3rem\" }}>\n          Enter your food emoji here to know the meaning of it\n        </h2>\n      </div>\n      <input placeholder=\"e.g. üç® (ice cream)\" onChange={foodInputHandler} />\n      <h2 className=\"Result\">{meaning}</h2>\n      <h3>Food emojis we know, you can choose from these also</h3>\n      {foodsWeKnow.map(function (foodEmoji) {\n        return (\n          <span\n            key={foodEmoji}\n            onClick={() => foodEmojiClickHandler(foodEmoji)}\n          >\n            {foodEmoji}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}